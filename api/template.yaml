AWSTemplateFormatVersion: 2010-09-09
Description: >-
  api for draff.io
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  DomainNameParam:
    Type: String
    Description: Domain name for staging endpoint

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  GetDraffExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": {
                    "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
            }
        ]
      }
      Policies:
        - PolicyName: DynamoDBReadPolicy
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
            {
              Effect: Allow,
              Action: [
                "dynamodb:GetItem"
              ],
              Resource: !GetAtt draffTable.Arn
            }]
          }
  PutTmpDraffExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": {
                    "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
            }
        ]
      }
      Policies:
        - PolicyName: TmpDraffPolicy
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "dynamodb:PutItem",
                "Resource": !GetAtt draffTable.Arn,
                "Condition": {
                  "ForAnyValue:StringEquals": {
                    "dynamodb:LeadingKeys": "tmp"
                    }
                  }
              },
              {
                "Effect": "Allow",
                "Action": "s3:PutObject",
                "Resource": !GetAtt DraffBucket.Arn,
                "Condition": {
                  "ForAnyValue:StringEquals": {
                    "s3:prefix": "tmp"
                    }
                  }
              }
            ]
          }
  
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is an API gateway associated with the getByIdFunction and putItemFunctions
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowMethods: "'OPTIONS, POST, GET'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: !Join ["", ["'", !Ref DomainNameParam, "'" ]]
      Models:
        TmpDraff:
          type: object
          required: [ 'body' ]
          properties:
            body:
              type: string

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  getDraffFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/ 
      Handler: src/handlers/get-draff.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Description: Get a Draff from Dynamo.
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DRAFF_TABLE: !Ref draffTable
          ALLOW_ORIGIN: !Ref DomainNameParam
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
      Timeout: 30
      Role: !GetAtt GetDraffExecutionRole.Arn
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref draffTable
      - S3ReadPolicy:
          BucketName: !Ref DraffBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /code/{username}/{draffName}
            Method: GET
            RequestParameters:
              - method.request.path.username
              - method.request.path.draffName
            RestApiId:
              Ref: ApiGatewayApi

  newTmpDraffFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/ 
      Handler: src/handlers/new-tmp-draff.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Description: Save a "tmp" draff.
      Timeout: 30
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DRAFF_TABLE: !Ref draffTable
          S3_BUCKET: !Ref DraffBucket
          ALLOW_ORIGIN: !Ref DomainNameParam
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
      Role: !GetAtt PutTmpDraffExecutionRole.Arn
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref draffTable
      - S3ReadPolicy:
          BucketName: !Ref DraffBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /code/tmp/
            Method: POST
            RequestModel:
              Model: TmpDraff
              Required: true
              ValidateBody: true
            RestApiId:
              Ref: ApiGatewayApi
      
  # This is a Lambda function config associated with the source code: put-item.js

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  draffTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      KeySchema:
        - AttributeName: username
          KeyType: HASH
        - AttributeName: draffname
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
        - AttributeName: draffname
          AttributeType: S

  # S3 Bucket to host single page app website
  WebSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, /*]]
          Condition:
            StringEquals:
              AWS:SourceArn: !Join ['', ['arn:aws:cloudfront::', !Ref "AWS::AccountId",
                  ":distribution/", !Ref CloudFrontDistribution]]
  # CloudFront Distribution for hosting the single page app website
  DraffBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: LogicalName
          Value: draffio-draffs
        - Key: ManagedBy
          Value: draffio-sam
      VersioningConfiguration:
        Status: Suspended
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false
  DraffBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DraffBucket
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "Statement1",
                "Effect": "Allow",
                "Principal": {
                    # Lambda GetCode Execution
                    "AWS": { "Fn::GetAtt": ["GetDraffExecutionRole", "Arn"] }
                },
                "Action": "s3:GetObject",
                "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "DraffBucket"}, "/*" ]] }
            }
        ]
      }


  CloudFrontSSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainNameParam
      DomainValidationOptions:
        - DomainName: !Ref DomainNameParam
          ValidationDomain: !Ref DomainNameParam
      ValidationMethod: DNS

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
          Id: myS3Origin
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
          S3OriginConfig:
            OriginAccessIdentity: ''
        Aliases:
          - !Ref DomainNameParam
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          CachedMethods:
          - GET
          - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_100
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - US
            - CA
            - GB
            - DE
        ViewerCertificate:
          AcmCertificateArn: !Ref CloudFrontSSLCertificate
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
            ErrorCachingMinTTL: 5
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${WebSiteBucket} OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
Outputs:
  APIGatewayEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/v1/"
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value: !GetAtt CloudFrontDistribution.DomainName
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value: !Ref WebSiteBucket
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
